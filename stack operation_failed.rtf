{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 	public String operation(String expression) \{\
		char[] tokens = expression.toCharArray();\
		Stack<Double> operands = new Stack<Double>();\
		Stack<Character> operators = new Stack<Character>();\
		for (int i = 0; i < tokens.length; i++) \{\
			if (tokens[i] == ' ')\
				continue;\
			if (tokens[i] >= '0' && tokens[i] <= '9') \{\
				StringBuffer sbuf = new StringBuffer();\
				while (i < tokens.length && tokens[i] >= '0' && tokens[i] <= '9') \{\
					sbuf.append(tokens[i++]);\
				\}\
				operands.push(Double.
\f1\i parseDouble
\f0\i0 (sbuf.toString()));\
			\} else if (tokens[i] == '(') \{\
				operators.push(tokens[i]);\
			\} else if (tokens[i] == ')') \{\
				while (operators.peek() != '(') \{\
					operands.push(applyOp(operators.pop(), operands.pop(), operands.pop()));\
				\}\
				operators.pop();\
			\} else if (tokens[i] == '+' || tokens[i] == '-' || tokens[i] == '\'d7' || tokens[i] == '\'f7') \{\
				while (!operators.empty() && hasPrecedence(tokens[i], operators.peek())) \{\
					operands.push(applyOp(operators.pop(), operands.pop(), operands.pop()));\
				\}\
				operators.push(tokens[i]);\
			\}\
		\}\
		while (!operators.empty())\
			operands.push(applyOp(operators.pop(), operands.pop(), operands.pop()));\
\
		return operands.pop().toString();\
	\}\
\
	public boolean hasPrecedence(char op1, char op2) \{\
		if (op2 == '(' || op2 == ')')\
			return false;\
		if ((op1 == '\'d7' || op1 == '\'f7') && (op2 == '+' || op2 == '-'))\
			return false;\
		else\
			return true;\
	\}\
\
	public double applyOp(char op, double b, double a) \{\
		switch (op) \{\
		case '+':\
			return a + b;\
		case '-':\
			return a - b;\
		case '\'d7':\
			return a * b;\
		case '\'f7':\
			try \{\
				return a / b;\
			\} catch (ArithmeticException e) \{\
				label.setText("ERROR");\
				field0.setText("ERROR");\
			\}\
		\}\
		return 0;\
	\}}